#!/usr/bin/python3.7
import hashlib
import telebot
import time
import json
import requests
import MySQLdb
import datetime
from bs4 import BeautifulSoup
from telebot import types
number='+79063886667'
key='a2cbc29d4d1a4c121b31f7fc7d5bba78'

prices={'–ø–æ–¥–ø–∏—Å—á–∏–∫–∏':0.15,'–ø—Ä–∏–≤–∞—Ç':0.1,'–ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∏–Ω—Å—Ç–∞':0.01, '–ª–∞–π–∫–∏ –∏–Ω—Å—Ç–∞':0.1,'–ø–æ–¥–ø–∏—Å—á–∏–∫–∏2':0.25,'–ø–æ–¥–ø–∏—Å—á–∏–∫–∏3':0.18}

class SQLighter:
  def __init__(self):
        self.conn = MySQLdb.connect("localhost","root","A1katra519","bot_db",charset = "utf8", use_unicode = True) #,charset='utf8'

        self.c = self.conn.cursor()
  def sel_from(self,m):
     try:
      return self.c.execute("SELECT * FROM nakrutka_bot WHERE id =(%s)"% (m))
     finally:
                 self.c.close()
                 self.conn.close()

  def insert(self,query):
        try:
            self.c.execute(query)
            self.conn.commit()
        finally:
                 self.c.close()
                 self.conn.close()
  def update(self,q,m,z):
   try:
    data = (m,z)
    self.c.execute(q,data)
    self.conn.commit()
    rows =self.c.fetchall()
    return rows
   finally:
                 self.c.close()
                 self.conn.close()
  def update2(self,q):
   try:
    #data = (i,z, m)
    self.c.execute(q)
    self.conn.commit()
    rows =self.c.fetchall()
    return rows
   finally:
                 self.c.close()
                 self.conn.close()
  def updatee24(self,q):
   try:

    self.c.execute(q)
    self.conn.commit()
    rows =self.c.fetchall()
    rows2 =self.c.description
    return rows,rows2
   finally:
                 self.c.close()
                 self.conn.close()
  def updateargs(self,q,*args):
   try:
    data = (args)
    self.c.execute(q,data)
    self.conn.commit()
    rows =self.c.fetchall()
    return rows
   finally:
                 self.c.close()
                 self.conn.close()


  def updatee24(self,q):
   try:

    self.c.execute(q)
    self.conn.commit()
    rows =self.c.fetchall()
    rows2 =self.c.description
    return rows,rows2
   finally:
                 self.c.close()
                 self.conn.close()




#query = "ALTER TABLE nakrutka_bot ADD %s VARCHAR(150)" % ('last_service')
#SQLighter().insert(query)

#SQLighter().updateargs(""" UPDATE  qiwi_last_date SET date = (%s) WHERE date != %s """,'2020-01-09T09:39:54+03:00',1)

def db_create(table_name,lis):

    createsqltable = """CREATE TABLE IF NOT EXISTS """ + table_name + " (" + " VARCHAR(1000),".join(lis) + " VARCHAR(1000))"
    SQLighter().insert(createsqltable)

db_create('nakrutka_bot',['id', 'username','date' ,'balance','last_amount','last_channel','last_price'])
db_create('qiwi_last_date',[ 'date'])
db_create('nakrutka_orders',['id', 'username','date' ,'channel','price','amount'])

def checkk(name):
        q = "SELECT * FROM  %s"%name;rows,desc=SQLighter().updatee24(q);column_names = [col[0] for col in desc];li=[];li2=[]
        for i in range(0,len(column_names)):li.append(i)
        li2=[]
        for i in range(0,len(column_names)):

             mes=str(li[i])+' '+str(column_names[i]);li2.append(mes)
             #mes=str(column_names[i]);li2.append(mes)
        print (name,li2)

def add_order(chat_id, username,channel,price,amount):
 dt = str(datetime.datetime.now().replace(microsecond=0)).split(' ')[0]
 query = "INSERT INTO nakrutka_orders (id, username,date,channel,price,amount) VALUES ('%s','%s','%s','%s','%s','%s')" % (chat_id,username,str(dt),channel,price,amount)
 SQLighter().insert(query)

checkk('nakrutka_bot');checkk('nakrutka_orders')


#query = "INSERT INTO qiwi_last_date (date) VALUES ('%s')" % ('2019-12-16T21:23:51+03:00')
#SQLighter().insert(query)

def add_usr(chat_id,usname):
 dt = datetime.datetime.now().replace(microsecond=0)
 query = "INSERT INTO nakrutka_bot (id, username,date,balance,last_amount,last_channel) VALUES ('%s','%s','%s','%s','%s','%s')" % (chat_id,usname,str(dt),0,0,0)
 SQLighter().insert(query)


api='1041126730:AAG9p0QAzFhWNi6JvyAmdMaumjj6HbCfdFI'
bot = telebot.TeleBot(api,threaded=False)
bot.stop_polling()
bot.delete_webhook()
print('working')

@bot.message_handler(content_types=['audio', 'document', 'photo', 'sticker', 'video', 'video_note', 'voice', 'location','contact','new_chat_members','left_chat_member', 'new_chat_title', 'new_chat_photo', 'delete_chat_photo', 'group_chat_created', 'supergroup_chat_created', 'channel_chat_created', 'migrate_to_chat_id', 'migrate_from_chat_id', 'pinned_message'])
def callback_inliness2(call):

        print('strange content')



@bot.message_handler(commands=['start', 'help'])
def send_welcom11e(message,):


  x=SQLighter().sel_from(message.chat.id)
  if x==0 :

      add_usr(message.chat.id,get_usrnamee(message))





  mes='''‚ùóÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ.
        –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∂–º–∏: /start '''
  bot.send_message(message.chat.id, mes,parse_mode='HTML',reply_markup=get_main_menu() )


@bot.message_handler(func = lambda message:   '‚Ü™Ô∏è' in message.text or '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in message.text or '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in message.text)
def back_tomainmenu(message):

  mes='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
  bot.send_message(message.chat.id, mes,parse_mode='HTML',reply_markup=get_main_menu() )

def get_main_menu():
  markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
  markup.add('üöÄ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ Telegram B1 üöÄ')
  markup.add('üé≠ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ Telegram B2 üé≠')
  markup.add('üí∞ –ë–∞–ª–∞–Ω—Å','‚ôªÔ∏è –ú–æ–∏ –∑–∞–∫–∞–∑—ã')
  markup.add('‚ùóÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',)#'üí° –ê–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä—ã')
  return markup


@bot.message_handler(func = lambda message:   'üé≠ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ Telegram B2 üé≠' in message.text )
def insta_subs(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
    markup.add('üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ RU2','üë§ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ BOT')
    mes='–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É'
    markup.add('‚Ü™Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, mes,parse_mode='HTML',disable_web_page_preview=True,reply_markup=markup)



@bot.message_handler(func = lambda message: 'üë§ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ BOT'  in message.text)
def insta_likes(message):
    SQLighter().updateargs(""" UPDATE  nakrutka_bot SET last_service = (%s) WHERE id = %s """,'–ª–∞–π–∫–∏',message.chat.id)
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
    mes=f'''üí∞–¶–µ–Ω–∞ –∑–∞ 10 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - 1 —Ä—É–±.
                      100 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - 10 —Ä—É–±.
                      ...
            ‚ùó–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª: ( https://t.me/Your_Channel )  '''

    markup.add('‚Ü™Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    z=bot.send_message(message.chat.id, mes,parse_mode='HTML',disable_web_page_preview=True,reply_markup=markup)
    bot.register_next_step_handler(z, handle_instagr_likes)


def handle_instagr_likes(message):
     if '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in message.text or '‚Ü™Ô∏è' in message.text or 'start' in message.text : back_tomainmenu(message);return
     SQLighter().updateargs(""" UPDATE  nakrutka_bot SET last_channel = (%s) WHERE id = %s """,message.text,message.chat.id)
     markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)

     markup.add('‚Ü™Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
     mes='''üîª–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:
     –º–∏–Ω/–º–∞–∫—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫–∞–∑–∞:
    10-20 000 '''
     z=bot.send_message(message.chat.id, mes,parse_mode='HTML',disable_web_page_preview=True,reply_markup=markup)
     bot.register_next_step_handler(z, handle_instagr_likes2)

def handle_instagr_likes2(message):
     if '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in message.text or '‚Ü™Ô∏è' in message.text or 'start' in message.text : back_tomainmenu(message);return
     work_with_order(message,handle_instagr_likes2,10, prices['–ø—Ä–∏–≤–∞—Ç'])  #500k base



@bot.message_handler(func = lambda message:   'üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ RU2' in message.text )
def insta_subs2(message):
    if '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏' in message.text: serv='–ø–æ–¥–ø–∏—Å—á–∏–∫–∏'
    else: serv='–ª–∞–π–∫–∏'
    print(2123,serv)


    SQLighter().updateargs(""" UPDATE  nakrutka_bot SET last_service = (%s) WHERE id = %s """,serv,message.chat.id)
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
    mes=f'''üí∞–¶–µ–Ω–∞ –∑–∞ 100 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - 18 —Ä—É–±
                     1000 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - 180 —Ä—É–±
                            ...
            ‚ùó–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª: (https://t.me/Your_Channel–µ)   '''

    markup.add('‚Ü™Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    z=bot.send_message(message.chat.id, mes,parse_mode='HTML',disable_web_page_preview=True,reply_markup=markup)
    bot.register_next_step_handler(z, handle_instagr_sub)

def handle_instagr_sub(message):
     if '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in message.text or '‚Ü™Ô∏è' in message.text or 'start' in message.text : back_tomainmenu(message);return
     SQLighter().updateargs(""" UPDATE  nakrutka_bot SET last_channel = (%s) WHERE id = %s """,message.text,message.chat.id)
     markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)

     markup.add('‚Ü™Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
     mes='''üîª–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:
               –º–∏–Ω/–º–∞–∫—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫–∞–∑–∞:
            10-20 000 '''
     z=bot.send_message(message.chat.id, mes,parse_mode='HTML',disable_web_page_preview=True,reply_markup=markup)
     bot.register_next_step_handler(z, handle_instagr_sub2)


def handle_instagr_sub2(message):
     if '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in message.text or '‚Ü™Ô∏è' in message.text or 'start' in message.text : back_tomainmenu(message);return
     work_with_order(message,handle_instagr_sub2,10,prices['–ø–æ–¥–ø–∏—Å—á–∏–∫–∏3'])  #cheap base





def work_with_order(message,func,minim,price):
         markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
         markup.add('‚Ü™Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
         mes='–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É'
         try:
            b=int(message.text)

         except:
             markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)


             z=bot.send_message(message.chat.id, mes,parse_mode='HTML',reply_markup=markup)
             bot.register_next_step_handler(z, func);return

             return

         if float(message.text)<minim:
             mes=f'–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ {minim} '
             z=bot.send_message(message.chat.id, mes,parse_mode='HTML',reply_markup=markup)
             bot.register_next_step_handler(z, func);return

         usr=SQLighter().update2("SELECT * FROM   nakrutka_bot WHERE id =(%s)"%message.chat.id)
         price=int(message.text)*price
         SQLighter().updateargs(""" UPDATE  nakrutka_bot SET last_amount = (%s),last_price=(%s) WHERE id = %s """,message.text,price,message.chat.id)
         if float(usr[0][3])<price:

            mes=f'üí≥–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –±–∞–ª–∞–Ω—Å –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Ç—Å–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å <b>{usr[0][3]}—Ä.</b>'
            z=bot.send_message(message.chat.id, mes,parse_mode='HTML',reply_markup=markup)
            bot.register_next_step_handler(z, func);return

         else:
            mes=f"""
            ‚úÖ–í–∞—à –∑–∞–∫–∞–∑:

–ö–∞–Ω–∞–ª: {usr[0][5]}

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{message.text}</b>

–¶–µ–Ω–∞: <b>{price}</b>

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?

            """
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
            print(3223,usr[0][7])
            if usr[0][7]=='Telegram1':
                markup.add('‚ñ∂Ô∏è –î–∞','‚Ü™Ô∏è –ù–µ—Ç')
            elif usr[0][7]=='Telegram2':
                    markup.add('üéØ –î–∞','‚Ü™Ô∏è –ù–µ—Ç')
            else:
                markup.add('üí´ –î–∞','‚Ü™Ô∏è –ù–µ—Ç')
            z=bot.send_message(message.chat.id, mes,parse_mode='HTML',reply_markup=markup,disable_web_page_preview=True)

@bot.message_handler(func = lambda message:   'üí´' in message.text )
def work_with_order_inst(message):
    usr=SQLighter().update2("SELECT * FROM   nakrutka_bot WHERE id =(%s)"%message.chat.id)
    if float(usr[0][3])>=float(usr[0][6]):
        SQLighter().updateargs(""" UPDATE  nakrutka_bot SET balance = balance- (%s) WHERE id = %s """,usr[0][6],message.chat.id)
        mes='–í–∞—à –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω'
        bot.send_message(message.chat.id, mes,parse_mode='HTML',disable_web_page_preview=True)


        add_order(message.chat.id, get_usrnamee(message),usr[0][5],usr[0][6],usr[0][4])

        if  usr[0][7]=='–ø–æ–¥–ø–∏—Å—á–∏–∫–∏':serv='5147'
        else:serv='5134'

        bulkfollows_order(usr[0][5],usr[0][4],serv)
        back_tomainmenu(message)
    else:
        mes=f'üí≥–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –±–∞–ª–∞–Ω—Å –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Ç—Å–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å <b>{usr[0][3]}—Ä.</b>'
        bot.send_message(message.chat.id, mes,parse_mode='HTML')
        back_tomainmenu(message)

@bot.message_handler(func = lambda message:   '‚ôªÔ∏è' in message.text )
def all_orders(message):
    orders=SQLighter().update2("SELECT * FROM   nakrutka_orders WHERE id =(%s)"%message.chat.id)

    total=len(orders)
    if  total<1:
        active=0
        lstorders=' '

    else:

        dt = str(datetime.datetime.now().replace(microsecond=0)).split(' ')[0]
        print(32322323,dt)
        active=SQLighter().updateargs("SELECT * FROM   nakrutka_orders WHERE date=(%s) AND id =(%s)",dt,message.chat.id)
        active=len(active)
        lstorders=orders[-10:]
        lstorders=[f'–ö–∞–Ω–∞–ª: {i[3]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{i[5]}</b> \n–¶–µ–Ω–∞: <b>{i[4]}</b>'  for i in lstorders]
        lstorders='\n\n'.join(lstorders)
    mes=f"""
‚ôªÔ∏è –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total}
üöÄ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {active}

–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤:\n{lstorders}"""
    bot.send_message(message.chat.id, mes,parse_mode='HTML',disable_web_page_preview=True)



@bot.message_handler(func = lambda message:   'üí∞' in message.text )
def balance(message):
    usr=SQLighter().update2("SELECT * FROM   nakrutka_bot WHERE id =(%s)"%message.chat.id)
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
    markup.add('üí≤–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç')
    markup.add('‚Ü™Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bal='{0:.2f}'.format(float(usr[0][3]))
    mes=f'üí≤ –í–∞—à –±–∞–ª–∞–Ω—Å: {bal}—Ä.üè∑ \n\n–í–∞—à id: <b>{message.chat.id}</b>'
    bot.send_message(message.chat.id, mes,parse_mode='HTML',reply_markup=markup)



@bot.message_handler(func = lambda message:   'üí≤' in message.text )
def topupbal(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
    markup.add('üíµ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂')
    markup.add('‚Ü™Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, '–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã',parse_mode='HTML')#,reply_markup=keyboard)



    mes=f'üî•–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ —ç—Ç–æ—Ç QIWI –∫–æ—à–µ–ª–µ–∫:\n\n<b>{number}</b>\n—Å–æ —Å–ª–µ–¥—É—é—â–∏–º  –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∫ –ø–µ—Ä–µ–≤–æ–¥—É \n\n<b>'+str(message.chat.id)+'</b>\n\n‚õîÔ∏è–û—á–µ–Ω—å –≤–∞–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–¥ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –∏–Ω–∞—á–µ –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω!\nÔ∏è–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–ø–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂ —Å—É–º–º–∞ –∑–∞—á–∏—Å–ª–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã'

    bot.send_message(message.chat.id, mes,parse_mode='HTML',reply_markup=markup)


from dateutil.parser import parse
from dateutil import parser
@bot.message_handler(func = lambda message: 'üíµ' in message.text)
def check_qiwi(m):





    qiwi_before=SQLighter().updateargs("SELECT * FROM   qiwi_last_date WHERE date !=(%s)",'1')
    qiwi_before=qiwi_before[0][0]; print(qiwi_before)
    #with open('QIWI.txt','r') as f:
      #       qiwi_before=f.read()

    try:
        print('–û–±—Ä–∞–±–æ—Ç–∫–∞')
        s = requests.Session()
        s.headers['authorization'] = 'Bearer ' + key
        parameters = {'rows': '10'}
        h = s.get('https://edge.qiwi.com/payment-history/v1/persons/'+number+'/payments', params = parameters)
        x=json.loads(h.text)
    except Exception as e:
        print(3232,e)

    try:
        for i in x['data']:
         try:
          if i['status'] == "SUCCESS":
              last_qiwi=str(x['data'][0]['date'])
              if(qiwi_before!=last_qiwi):
                  if i['comment']==None:

                          print('no comment')
                  else:
                       code = i['comment']
                       print('Inserted code:  ',code)
                  dt=parser.parse(qiwi_before)
                  dt1= i['date']
                  dt1 = parser.parse(dt1)
                  print('dates')
                  print(dt)
                  print(dt1)
                  if len(code) >0 and dt1>dt:
                                    idd=i['comment']

                                    print(00000,idd)

                                    print(123,idd)
                                    try:

                                        usr=SQLighter().updateargs("SELECT * FROM   nakrutka_bot WHERE id =(%s)",idd)
                                        if len(usr)>0:
                                            invest = float(i['sum']['amount'])
                                            print(invest)





                                            SQLighter().updateargs(" UPDATE nakrutka_bot SET balance =balance+ (%s) WHERE id = %s ",invest,idd)




                                            mes= '–í–∞—à –ø–ª–∞—Ç–µ–∂ –∑–∞—á–∏—Å–ª–µ–Ω: ' +str(invest)
                                            try:

                                                bot.send_message(231125267, mes+f'\nid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {idd}')
                                                bot.send_message(idd, mes)
                                            except:pass




                                    except Exception as e:
                                            print(traceback.format_exc())
                                            mes=' –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥'
                                            bot.send_message(231125267,mes)


         except Exception as e :
             print(555322323,e)

        SQLighter().updateargs(" UPDATE qiwi_last_date SET date = (%s) WHERE date != %s ",last_qiwi,1)
        #with open('QIWI.txt','w') as f:
            #f.write(str(last_qiwi))
    except Exception as e:
        print(767767657,traceback.format_exc())
        print(e)
        pass



@bot.message_handler(func = lambda message:   'üöÄ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ Telegram B1 üöÄ' in message.text )
def order_sub(message):
    mes='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é'
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
    markup.add('üìç Telegram1 - üëÄ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã')
    markup.add('üìç Telegram2 - –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ RU')
   # markup.add('üìç Telegram3 - –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ BOT')
    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    z=bot.send_message(message.chat.id, mes,parse_mode='HTML',reply_markup=markup)

@bot.message_handler(func = lambda message:   'üìç Telegram1 - üëÄ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã' in message.text )
def orders(message):
    typ=message.text.split(' ')[1]
    SQLighter().updateargs(""" UPDATE  nakrutka_bot SET last_service = (%s) WHERE id = %s """,typ,message.chat.id)
    mes=f"""
            üí∞–¶–µ–Ω–∞ –∑–∞ 100 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ - 1 —Ä—É–±
                     1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ - 10 —Ä—É–±.
            ‚ùóÔ∏è–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø–æ—Å—Ç
              –Ω–∞–ø—Ä–∏–º–µ—Ä - https://t.me/channel/2 """

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)

    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    z=bot.send_message(message.chat.id, mes,parse_mode='HTML',reply_markup=markup)


    bot.register_next_step_handler(z, handle_channelname)

@bot.message_handler(func = lambda message:   'üìç Telegram2 - –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ RU' in message.text )
def orders2(message):
    typ=message.text.split(' ')[1]
    SQLighter().updateargs(""" UPDATE  nakrutka_bot SET last_service = (%s) WHERE id = %s """,typ,message.chat.id)
    mes=f"""
            üí∞–¶–µ–Ω–∞ –∑–∞: 100 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - 25—Ä—É–±
                      1000 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - 250 —Ä—É–±...
            ‚ùó–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª: (https://t.me/Your_Channel–µ) """

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)

    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    z=bot.send_message(message.chat.id, mes,parse_mode='HTML',reply_markup=markup)


    bot.register_next_step_handler(z, handle_channelname22)


def handle_channelname22(message):
    if '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in message.text or '‚Ü™Ô∏è' in message.text or 'start' in message.text : back_tomainmenu(message);return


    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)

    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    if 'me' not in message.text and '@' not in message.text:

        mes='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'
        z=bot.send_message(message.chat.id, mes,parse_mode='HTML',reply_markup=markup)
        bot.register_next_step_handler(z, handle_channelname)
        return
    elif 'join' in message.text:
        mes='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω—ã—Ö. –ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞–Ω–∞–ª—ã'
        z=bot.send_message(message.chat.id, mes,parse_mode='HTML',reply_markup=markup)
        bot.register_next_step_handler(z, handle_channelname)
    else:
        mes=f"""
        üéóÔ∏è–í—ã —Ä–∞—Å–∫—Ä—É—á–∏–≤–∞–µ—Ç–µ –∫–∞–Ω–∞–ª - {message.text}

üîª–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:

 –º–∏–Ω/–º–∞–∫—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫–∞–∑–∞:
    500-30 000
        """

        SQLighter().updateargs(""" UPDATE  nakrutka_bot SET last_channel = (%s) WHERE id = %s """,message.text,message.chat.id)

        z=bot.send_message(message.chat.id, mes,parse_mode='HTML',reply_markup=markup,disable_web_page_preview=True)
        usr=SQLighter().update2("SELECT * FROM   nakrutka_bot WHERE id =(%s)"%message.chat.id)

        bot.register_next_step_handler(z, handle_channelamount22)

def handle_channelamount22(message):
         if '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in message.text: back_tomainmenu(message);return
         work_with_order(message,handle_instagr_sub2,500,prices['–ø–æ–¥–ø–∏—Å—á–∏–∫–∏2'])   #—Ä—É –ø–æ–¥–ø–∏—Å—á–∏–∫–∏


@bot.message_handler(func = lambda message:   'üìç Telegram3 - –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ BOT' in message.text )
def orders3(message):
    typ=message.text.split(' ')[1]
    SQLighter().updateargs(""" UPDATE  nakrutka_bot SET last_service = (%s) WHERE id = %s """,typ,message.chat.id)
    mes=f"""
             üí∞–¶–µ–Ω–∞ –∑–∞: 100 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - 12 —Ä—É–±.
             ‚ùóÔ∏è–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
             –Ω–∞–ø—Ä–∏–º–µ—Ä: @address
                                                """

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)

    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    z=bot.send_message(message.chat.id, mes,parse_mode='HTML',reply_markup=markup)


    bot.register_next_step_handler(z, handle_channelname33)

def handle_channelname33(message):
    if '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in message.text or '‚Ü™Ô∏è' in message.text or 'start' in message.text : back_tomainmenu(message);return


    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)

    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    if 'me' not in message.text and '@' not in message.text:

        mes='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'
        z=bot.send_message(message.chat.id, mes,parse_mode='HTML',reply_markup=markup)
        bot.register_next_step_handler(z, handle_channelname)
        return
    elif 'join' in message.text:
        mes='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω—ã—Ö. –ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞–Ω–∞–ª—ã'
        z=bot.send_message(message.chat.id, mes,parse_mode='HTML',reply_markup=markup)
        bot.register_next_step_handler(z, handle_channelname)
    else:
        mes=f"""
        üéóÔ∏è–í—ã —Ä–∞—Å–∫—Ä—É—á–∏–≤–∞–µ—Ç–µ –∫–∞–Ω–∞–ª - {message.text}
ü§ñ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ - {prices['–ø–æ–¥–ø–∏—Å—á–∏–∫–∏3']}  —Ä—É–±.


üîª–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:

(–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ 100 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)
        """

        SQLighter().updateargs(""" UPDATE  nakrutka_bot SET last_channel = (%s) WHERE id = %s """,message.text,message.chat.id)

        z=bot.send_message(message.chat.id, mes,parse_mode='HTML',reply_markup=markup,disable_web_page_preview=True)
        usr=SQLighter().update2("SELECT * FROM   nakrutka_bot WHERE id =(%s)"%message.chat.id)

        bot.register_next_step_handler(z, handle_channelamount33)

def handle_channelamount33(message):
         if '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in message.text: back_tomainmenu(message);return
         work_with_order(message,handle_instagr_sub2,100,prices['–ø–æ–¥–ø–∏—Å—á–∏–∫–∏3']) # –¢3

def handle_channelname(message):
    if '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in message.text or '‚Ü™Ô∏è' in message.text or 'start' in message.text : back_tomainmenu(message);return


    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)

    markup.add('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    if 'me' not in message.text and '@' not in message.text:

        mes='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'
        z=bot.send_message(message.chat.id, mes,parse_mode='HTML',reply_markup=markup)
        bot.register_next_step_handler(z, handle_channelname)
        return
    elif 'join' in message.text:
        mes='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω—ã—Ö. –ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞–Ω–∞–ª—ã'
        z=bot.send_message(message.chat.id, mes,parse_mode='HTML',reply_markup=markup)
        bot.register_next_step_handler(z, handle_channelname)
    else:
        mes=f"""
        üéóÔ∏è–í—ã —Ä–∞—Å–∫—Ä—É—á–∏–≤–∞–µ—Ç–µ –∫–∞–Ω–∞–ª - {message.text}

üîª–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:

 –º–∏–Ω/–º–∞–∫—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫–∞–∑–∞:
    50-100 000
        """

        SQLighter().updateargs(""" UPDATE  nakrutka_bot SET last_channel = (%s) WHERE id = %s """,message.text,message.chat.id)

        z=bot.send_message(message.chat.id, mes,parse_mode='HTML',reply_markup=markup,disable_web_page_preview=True)
        usr=SQLighter().update2("SELECT * FROM   nakrutka_bot WHERE id =(%s)"%message.chat.id)

        bot.register_next_step_handler(z, handle_channelamount)



def create_task_panel(chan,amount,serv):

    url='https://justanotherpanel.com/api/v2'
    API='3c6548ea008810a7ede88f2a6fc6ac21'
    action='balance'
    params = {'key': '3c6548ea008810a7ede88f2a6fc6ac21', 'action': 'balance'}

    z=requests.post(url,params=params)
    print(z.text)

    params = {'key': '3c6548ea008810a7ede88f2a6fc6ac21', 'action': 'add','service':serv,'link':chan,'quantity':amount}
    z=requests.post(url,params=params)
    print(z.text)


def handle_channelamount(message):
         if '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in message.text: back_tomainmenu(message);return
         work_with_order(message,handle_instagr_sub2,50,prices['–ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∏–Ω—Å—Ç–∞']) #–ø—Ä–æ—Å–º–æ—Ç—Ä—ã

@bot.message_handler(func = lambda message:   '‚ñ∂Ô∏è' in message.text or 'üéØ' in  message.text )
def accept_channel(message):

    usr=SQLighter().update2("SELECT * FROM   nakrutka_bot WHERE id =(%s)"%message.chat.id)
    if float(usr[0][3])>=float(usr[0][6]):
        SQLighter().updateargs(""" UPDATE  nakrutka_bot SET balance = balance- (%s) WHERE id = %s """,usr[0][6],message.chat.id)
        mes='–í–∞—à –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω'
        bot.send_message(message.chat.id, mes,parse_mode='HTML',disable_web_page_preview=True)


        add_order(message.chat.id, get_usrnamee(message),usr[0][5],usr[0][6],usr[0][4])
        if 'üéØ' in message.text:
            create_task_panel(usr[0][5],usr[0][4],'5916')
        else:
          create_task_panel(usr[0][5],usr[0][4],'1365')
        back_tomainmenu(message)
    else:
        mes=f'üí≥–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –±–∞–ª–∞–Ω—Å –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Ç—Å–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å <b>{usr[0][3]}—Ä.</b>'
        bot.send_message(message.chat.id, mes,parse_mode='HTML')
        back_tomainmenu(message)

def bulkfollows_order(chan,amount,service_id):
    url='https://bulkfollows.com/api/v2'
    API='72047d001517fee9b2632415ca45b329'

    params = {'key': API, 'action': 'balance'}

    z=requests.post(url,params=params)
    print('BULKKK',z.text)
    z=z.json()
    print('service balance: ',z['balance'])
    if float(z['balance'])<0.1:
        mes='–ë–∞–ª–∞–Ω—Å –∏—Å—á–µ—Ä–∞–ø–Ω, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É '
        bot.send_message(785839324,mes)


    params = {'key': API, 'action': 'add','service':service_id,'link':chan,'quantity':amount}

    z=requests.post(url,params=params)
    print(z.text)

@bot.message_handler(func = lambda message:   '‚ùóÔ∏è' in message.text )
def information(message):

    mes="""
    üîª –ì–ª–∞–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

     –ü—Ä–æ—Å—Ç–æ –∏ –Ω–µ–¥–æ—Ä–æ–≥–æ.
     –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ –Ω–µ–¥–æ—Ä–æ–≥–æ–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –í–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.
     –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –≤–∞–º —É—Å–ª—É–≥—É –∏ —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.
    _____________________________________

    üî∑Telegram Base1

     Telegram1 - üëÄ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã (–±–∞–∑–∞ 100 —Ç—ã—Å—è—á)
     –õ–∏–º–∏—Ç—ã –¥–æ 100–ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ 1 –∫–∞–Ω–∞–ª –≤ –¥–µ–Ω—å.
     –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç. –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –∑–∞–ø–∞—Å–æ–º!
     [10—Ä—É–±/1000—à—Ç] [50–º–∏–Ω-200 000–º–∞–∫—Å]

     Telegram RU - üë• –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ (–±–∞–∑–∞ 30 —Ç—ã—Å—è—á)
     –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å –Ω–∏–∫–Ω–µ–π–º–∞–º–∏ –∏ –∞–≤–∫–∞–º–∏,
     5-10% –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç –∑–∞–ø–∏—Å–∏.
     –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç 0-1—á. –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ 3–∫/–¥–µ–Ω—å.
     –ö–∞—á–µ—Å—Ç–≤–æ –∞–∫–∞—É–Ω—Ç–æ–≤ - REAL
     –ü–æ–¥–Ω–∏–º–∞—é—Ç –∫–∞–Ω–∞–ª –≤ –ø–æ–∏—Å–∫–µ!
     [250—Ä—É–±/1000—à—Ç] [500–º–∏–Ω-30 000–º–∞–∫—Å]
    _____________________________________

     üî∂Telegram Base2

     –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ RU2 üë• (–±–∞–∑–∞ 300 —Ç—ã—Å—è—á)
     –°—Ç–∞—Ä—Ç –¥–æ 1—á. –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ 10–∫/–¥–µ–Ω—å.
     [180—Ä—É–±/1000—à—Ç] [10–º–∏–Ω-300 000–º–∞–∫—Å]

     –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ BOT üë• (–±–∞–∑–∞ 20 —Ç—ã—Å—è—á)
     MIX —Ä–µ–≥–∏–æ–Ω—ã.
     –î–æ 5–∫/–¥–µ–Ω—å, –Ω–∞ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª
     –ö–∞—á–µ—Å—Ç–≤–æ –∞–∫–∞—É–Ω—Ç–æ–≤ - BOT
     [100—Ä—É–±/1000—à—Ç] [10–º–∏–Ω-500 000–º–∞–∫—Å]
     ____________________________________

    ü§ù–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º @manager_cheat

      """

    keyboard = types.InlineKeyboardMarkup()
   # url_button = types.InlineKeyboardButton(text="–°–∞–π—Ç", url="https://promotionup.ru")
    # keyboard.add(url_button)
    z=bot.send_message(message.chat.id, mes, parse_mode='HTML', reply_markup=keyboard)

@bot.message_handler(func = lambda message: 'add_balance'in message.text)
def hi23s11dwdw32(msg):

    #if msg.chat.id==231125267 or msg.chat.id==319517631:
        mes='–í–≤–µ–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –∏–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª,–Ω–∞–ø—Ä–∏–º–µ—Ä: 23123123 10'
        z=bot.send_message( msg.chat.id, mes,parse_mode='HTML',disable_web_page_preview=True)
        bot.register_next_step_handler(z, adddbalaa)



def adddbalaa(msg):
    idd,b=msg.text.split(' ')
    query = """ UPDATE  nakrutka_bot SET balance = (%s) WHERE id = %s """
    SQLighter().update(query,b,idd)
    mes='–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω'
    z=bot.send_message( msg.chat.id, mes,parse_mode='HTML',disable_web_page_preview=True)




def add_inline(z):
    kb = types.InlineKeyboardMarkup()
    kb.add(*[types.InlineKeyboardButton(text=name,callback_data=name)for name in z])
    return kb





def get_usrnamee(message):
        if message.from_user.username is not None: m=message.from_user.username;m='@'+m
        else:
            m=str(message.from_user.first_name)+' '+str(message.from_user.last_name)
        return m


def get_keyboard(m):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
    if len (m)==1:markup.add(m[0]);return markup;
    if len(m)% 2 == 0:

        for i in range(0, len(m), 2):

                markup.add(m[i],m[i + 1] )
        return markup
    else:
        for i in range(0, len(m)-1, 2):

                markup.add( m[i],m[i + 1] )
        markup.add(m[-1])
        return markup;

import traceback
while True:
     try:
        bot.polling(none_stop=True)
     except Exception as e:
         print(traceback.format_exc())

         time.sleep(2)
